// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CustomerService.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Moula.CustomerService {

  /// <summary>Holder for reflection information generated from CustomerService.proto</summary>
  public static partial class CustomerServiceReflection {

    #region Descriptor
    /// <summary>File descriptor for CustomerService.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CustomerServiceReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVDdXN0b21lclNlcnZpY2UucHJvdG8SBU1vdWxhIt8BCg9DdXN0b21lclJl",
            "cXVlc3QSCgoCSWQYASABKAUSFAoMQ3VzdG9tZXJDb2RlGAIgASgJEhEKCUZp",
            "cnN0TmFtZRgDIAEoCRIQCghMYXN0TmFtZRgEIAEoCRITCgtEYXRlT2ZCaXJ0",
            "aBgFIAEoCRI4ChBDdXN0b21lckNvbnRhY3RzGAYgAygLMh4uTW91bGEuQ3Vz",
            "dG9tZXJDb250YWN0c1JlcXVlc3QSNgoPQ3VzdG9tZXJBZGRyZXNzGAcgAygL",
            "Mh0uTW91bGEuQ3VzdG9tZXJBZGRyZXNzUmVxdWVzdCKHAQoXQ3VzdG9tZXJD",
            "b250YWN0c1JlcXVlc3QSCgoCSWQYASABKAUSEQoJSXNQcmltYXJ5GAIgASgI",
            "EhIKCkN1c3RvbWVySWQYAyABKAUSEQoJQ29udGFjdElkGAQgASgFEiYKB0Nv",
            "bnRhY3QYBSABKAsyFS5Nb3VsYS5Db250YWN0UmVxdWVzdCJECg5Db250YWN0",
            "UmVxdWVzdBIKCgJJZBgBIAEoBRIVCg1Db250YWN0VHlwZUlkGAIgASgFEg8K",
            "B0NvbnRhY3QYAyABKAkihgEKFkN1c3RvbWVyQWRkcmVzc1JlcXVlc3QSCgoC",
            "SWQYASABKAUSEQoJSXNQcmltYXJ5GAIgASgIEhIKCkN1c3RvbWVySWQYAyAB",
            "KAUSEQoJQWRkcmVzc0lkGAQgASgFEiYKB0FkZHJlc3MYBSABKAsyFS5Nb3Vs",
            "YS5BZGRyZXNzUmVxdWVzdCKGAQoOQWRkcmVzc1JlcXVlc3QSCgoCSWQYASAB",
            "KAUSFQoNQWRkcmVzc1R5cGVJZBgCIAEoBRIOCgZTdHJlZXQYAyABKAkSDwoH",
            "U3RyZWV0MhgEIAEoCRIOCgZTdWJ1cmIYBSABKAkSDwoHU3RhdGVJZBgGIAEo",
            "BRIPCgdDb3VudHJ5GAcgASgJIiwKFkNyZWF0ZUN1c3RvbWVyUmVzcG9uc2US",
            "EgoKc3VjY2Vzc2Z1bBgBIAEoCCIsChZVcGRhdGVDdXN0b21lclJlc3BvbnNl",
            "EhIKCnN1Y2Nlc3NmdWwYASABKAgiLQoVQ3VzdG9tZXJEZXRhaWxSZXF1ZXN0",
            "EhQKDFRvcEN1c3RvbWVycxgBIAEoBSKHAwoWQ3VzdG9tZXJEZXRhaWxSZXNw",
            "b25zZRIKCgJJZBgBIAEoBRIRCglGaXJzdE5hbWUYAiABKAkSEAoITGFzdE5h",
            "bWUYAyABKAkSEAoIRnVsbE5hbWUYBCABKAkSDwoHQ29udGFjdBgFIAEoCRIR",
            "CglDb250YWN0SWQYBiABKAUSFQoNQ29udGFjdFR5cGVJZBgHIAEoBRIZChFD",
            "dXN0b21lckNvbnRhY3RJZBgIIAEoBRIRCglBZGRyZXNzSWQYCSABKAUSDgoG",
            "U3RyZWV0GAogASgJEg8KB1N0cmVldDIYCyABKAkSDgoGU3VidXJiGAwgASgJ",
            "EhEKCVN0YXRlTmFtZRgNIAEoCRIPCgdTdGF0ZUlkGA4gASgFEg8KB0NvdW50",
            "cnkYDyABKAkSFQoNQWRkcmVzc1R5cGVJZBgQIAEoBRIZChFDdXN0b21lckFk",
            "ZHJlc3NJZBgRIAEoBRIUCgxDdXN0b21lckNvZGUYEiABKAkSEwoLRGF0ZU9m",
            "QmlydGgYEyABKAkiKAoSQ29udGFjdFR5cGVSZXF1ZXN0EhIKCnN1Y2Nlc3Nm",
            "dWwYASABKAgiUwoTQ29udGFjdFR5cGVSZXNwb25zZRIKCgJJZBgBIAEoBRIX",
            "Cg9Db250YWN0VHlwZUFiYnIYAiABKAkSFwoPQ29udGFjdFR5cGVOYW1lGAMg",
            "ASgJIigKEkFkZHJlc3NUeXBlUmVxdWVzdBISCgpzdWNjZXNzZnVsGAEgASgI",
            "IlMKE0FkZHJlc3NUeXBlUmVzcG9uc2USCgoCSWQYASABKAUSFwoPQWRkcmVz",
            "c1R5cGVOYW1lGAIgASgJEhcKD0FkZHJlc3NUeXBlQWJichgDIAEoCSIiCgxT",
            "dGF0ZVJlcXVlc3QSEgoKc3VjY2Vzc2Z1bBgBIAEoCCJBCg1TdGF0ZVJlc3Bv",
            "bnNlEgoKAklkGAEgASgFEhEKCVN0YXRlQWJichgCIAEoCRIRCglTdGF0ZU5h",
            "bWUYAyABKAky3AMKD0N1c3RvbWVyU2VydmljZRJJCg5DcmVhdGVDdXN0b21l",
            "chIWLk1vdWxhLkN1c3RvbWVyUmVxdWVzdBodLk1vdWxhLkNyZWF0ZUN1c3Rv",
            "bWVyUmVzcG9uc2UiABJJCg5VcGRhdGVDdXN0b21lchIWLk1vdWxhLkN1c3Rv",
            "bWVyUmVxdWVzdBodLk1vdWxhLlVwZGF0ZUN1c3RvbWVyUmVzcG9uc2UiABJS",
            "Cg9HZXRUb3BDdXN0b21lcnMSHC5Nb3VsYS5DdXN0b21lckRldGFpbFJlcXVl",
            "c3QaHS5Nb3VsYS5DdXN0b21lckRldGFpbFJlc3BvbnNlIgAwARJPChJHZXRB",
            "bGxDb250YWN0VHlwZXMSGS5Nb3VsYS5Db250YWN0VHlwZVJlcXVlc3QaGi5N",
            "b3VsYS5Db250YWN0VHlwZVJlc3BvbnNlIgAwARJPChJHZXRBbGxBZGRyZXNz",
            "VHlwZXMSGS5Nb3VsYS5BZGRyZXNzVHlwZVJlcXVlc3QaGi5Nb3VsYS5BZGRy",
            "ZXNzVHlwZVJlc3BvbnNlIgAwARI9CgxHZXRBbGxTdGF0ZXMSEy5Nb3VsYS5T",
            "dGF0ZVJlcXVlc3QaFC5Nb3VsYS5TdGF0ZVJlc3BvbnNlIgAwAUIYqgIVTW91",
            "bGEuQ3VzdG9tZXJTZXJ2aWNlYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.CustomerRequest), global::Moula.CustomerService.CustomerRequest.Parser, new[]{ "Id", "CustomerCode", "FirstName", "LastName", "DateOfBirth", "CustomerContacts", "CustomerAddress" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.CustomerContactsRequest), global::Moula.CustomerService.CustomerContactsRequest.Parser, new[]{ "Id", "IsPrimary", "CustomerId", "ContactId", "Contact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.ContactRequest), global::Moula.CustomerService.ContactRequest.Parser, new[]{ "Id", "ContactTypeId", "Contact" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.CustomerAddressRequest), global::Moula.CustomerService.CustomerAddressRequest.Parser, new[]{ "Id", "IsPrimary", "CustomerId", "AddressId", "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.AddressRequest), global::Moula.CustomerService.AddressRequest.Parser, new[]{ "Id", "AddressTypeId", "Street", "Street2", "Suburb", "StateId", "Country" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.CreateCustomerResponse), global::Moula.CustomerService.CreateCustomerResponse.Parser, new[]{ "Successful" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.UpdateCustomerResponse), global::Moula.CustomerService.UpdateCustomerResponse.Parser, new[]{ "Successful" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.CustomerDetailRequest), global::Moula.CustomerService.CustomerDetailRequest.Parser, new[]{ "TopCustomers" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.CustomerDetailResponse), global::Moula.CustomerService.CustomerDetailResponse.Parser, new[]{ "Id", "FirstName", "LastName", "FullName", "Contact", "ContactId", "ContactTypeId", "CustomerContactId", "AddressId", "Street", "Street2", "Suburb", "StateName", "StateId", "Country", "AddressTypeId", "CustomerAddressId", "CustomerCode", "DateOfBirth" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.ContactTypeRequest), global::Moula.CustomerService.ContactTypeRequest.Parser, new[]{ "Successful" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.ContactTypeResponse), global::Moula.CustomerService.ContactTypeResponse.Parser, new[]{ "Id", "ContactTypeAbbr", "ContactTypeName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.AddressTypeRequest), global::Moula.CustomerService.AddressTypeRequest.Parser, new[]{ "Successful" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.AddressTypeResponse), global::Moula.CustomerService.AddressTypeResponse.Parser, new[]{ "Id", "AddressTypeName", "AddressTypeAbbr" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.StateRequest), global::Moula.CustomerService.StateRequest.Parser, new[]{ "Successful" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Moula.CustomerService.StateResponse), global::Moula.CustomerService.StateResponse.Parser, new[]{ "Id", "StateAbbr", "StateName" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CustomerRequest : pb::IMessage<CustomerRequest> {
    private static readonly pb::MessageParser<CustomerRequest> _parser = new pb::MessageParser<CustomerRequest>(() => new CustomerRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomerRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerRequest(CustomerRequest other) : this() {
      id_ = other.id_;
      customerCode_ = other.customerCode_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      dateOfBirth_ = other.dateOfBirth_;
      customerContacts_ = other.customerContacts_.Clone();
      customerAddress_ = other.customerAddress_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerRequest Clone() {
      return new CustomerRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "CustomerCode" field.</summary>
    public const int CustomerCodeFieldNumber = 2;
    private string customerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerCode {
      get { return customerCode_; }
      set {
        customerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FirstName" field.</summary>
    public const int FirstNameFieldNumber = 3;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastName" field.</summary>
    public const int LastNameFieldNumber = 4;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateOfBirth" field.</summary>
    public const int DateOfBirthFieldNumber = 5;
    private string dateOfBirth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateOfBirth {
      get { return dateOfBirth_; }
      set {
        dateOfBirth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "CustomerContacts" field.</summary>
    public const int CustomerContactsFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Moula.CustomerService.CustomerContactsRequest> _repeated_customerContacts_codec
        = pb::FieldCodec.ForMessage(50, global::Moula.CustomerService.CustomerContactsRequest.Parser);
    private readonly pbc::RepeatedField<global::Moula.CustomerService.CustomerContactsRequest> customerContacts_ = new pbc::RepeatedField<global::Moula.CustomerService.CustomerContactsRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Moula.CustomerService.CustomerContactsRequest> CustomerContacts {
      get { return customerContacts_; }
    }

    /// <summary>Field number for the "CustomerAddress" field.</summary>
    public const int CustomerAddressFieldNumber = 7;
    private static readonly pb::FieldCodec<global::Moula.CustomerService.CustomerAddressRequest> _repeated_customerAddress_codec
        = pb::FieldCodec.ForMessage(58, global::Moula.CustomerService.CustomerAddressRequest.Parser);
    private readonly pbc::RepeatedField<global::Moula.CustomerService.CustomerAddressRequest> customerAddress_ = new pbc::RepeatedField<global::Moula.CustomerService.CustomerAddressRequest>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Moula.CustomerService.CustomerAddressRequest> CustomerAddress {
      get { return customerAddress_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomerRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomerRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (CustomerCode != other.CustomerCode) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (DateOfBirth != other.DateOfBirth) return false;
      if(!customerContacts_.Equals(other.customerContacts_)) return false;
      if(!customerAddress_.Equals(other.customerAddress_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (CustomerCode.Length != 0) hash ^= CustomerCode.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (DateOfBirth.Length != 0) hash ^= DateOfBirth.GetHashCode();
      hash ^= customerContacts_.GetHashCode();
      hash ^= customerAddress_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (CustomerCode.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(CustomerCode);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(LastName);
      }
      if (DateOfBirth.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DateOfBirth);
      }
      customerContacts_.WriteTo(output, _repeated_customerContacts_codec);
      customerAddress_.WriteTo(output, _repeated_customerAddress_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (CustomerCode.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CustomerCode);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (DateOfBirth.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DateOfBirth);
      }
      size += customerContacts_.CalculateSize(_repeated_customerContacts_codec);
      size += customerAddress_.CalculateSize(_repeated_customerAddress_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomerRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.CustomerCode.Length != 0) {
        CustomerCode = other.CustomerCode;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.DateOfBirth.Length != 0) {
        DateOfBirth = other.DateOfBirth;
      }
      customerContacts_.Add(other.customerContacts_);
      customerAddress_.Add(other.customerAddress_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            CustomerCode = input.ReadString();
            break;
          }
          case 26: {
            FirstName = input.ReadString();
            break;
          }
          case 34: {
            LastName = input.ReadString();
            break;
          }
          case 42: {
            DateOfBirth = input.ReadString();
            break;
          }
          case 50: {
            customerContacts_.AddEntriesFrom(input, _repeated_customerContacts_codec);
            break;
          }
          case 58: {
            customerAddress_.AddEntriesFrom(input, _repeated_customerAddress_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomerContactsRequest : pb::IMessage<CustomerContactsRequest> {
    private static readonly pb::MessageParser<CustomerContactsRequest> _parser = new pb::MessageParser<CustomerContactsRequest>(() => new CustomerContactsRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomerContactsRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerContactsRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerContactsRequest(CustomerContactsRequest other) : this() {
      id_ = other.id_;
      isPrimary_ = other.isPrimary_;
      customerId_ = other.customerId_;
      contactId_ = other.contactId_;
      Contact = other.contact_ != null ? other.Contact.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerContactsRequest Clone() {
      return new CustomerContactsRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsPrimary" field.</summary>
    public const int IsPrimaryFieldNumber = 2;
    private bool isPrimary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrimary {
      get { return isPrimary_; }
      set {
        isPrimary_ = value;
      }
    }

    /// <summary>Field number for the "CustomerId" field.</summary>
    public const int CustomerIdFieldNumber = 3;
    private int customerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomerId {
      get { return customerId_; }
      set {
        customerId_ = value;
      }
    }

    /// <summary>Field number for the "ContactId" field.</summary>
    public const int ContactIdFieldNumber = 4;
    private int contactId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContactId {
      get { return contactId_; }
      set {
        contactId_ = value;
      }
    }

    /// <summary>Field number for the "Contact" field.</summary>
    public const int ContactFieldNumber = 5;
    private global::Moula.CustomerService.ContactRequest contact_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Moula.CustomerService.ContactRequest Contact {
      get { return contact_; }
      set {
        contact_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomerContactsRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomerContactsRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsPrimary != other.IsPrimary) return false;
      if (CustomerId != other.CustomerId) return false;
      if (ContactId != other.ContactId) return false;
      if (!object.Equals(Contact, other.Contact)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsPrimary != false) hash ^= IsPrimary.GetHashCode();
      if (CustomerId != 0) hash ^= CustomerId.GetHashCode();
      if (ContactId != 0) hash ^= ContactId.GetHashCode();
      if (contact_ != null) hash ^= Contact.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsPrimary != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPrimary);
      }
      if (CustomerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CustomerId);
      }
      if (ContactId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ContactId);
      }
      if (contact_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Contact);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsPrimary != false) {
        size += 1 + 1;
      }
      if (CustomerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomerId);
      }
      if (ContactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactId);
      }
      if (contact_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Contact);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomerContactsRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsPrimary != false) {
        IsPrimary = other.IsPrimary;
      }
      if (other.CustomerId != 0) {
        CustomerId = other.CustomerId;
      }
      if (other.ContactId != 0) {
        ContactId = other.ContactId;
      }
      if (other.contact_ != null) {
        if (contact_ == null) {
          contact_ = new global::Moula.CustomerService.ContactRequest();
        }
        Contact.MergeFrom(other.Contact);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsPrimary = input.ReadBool();
            break;
          }
          case 24: {
            CustomerId = input.ReadInt32();
            break;
          }
          case 32: {
            ContactId = input.ReadInt32();
            break;
          }
          case 42: {
            if (contact_ == null) {
              contact_ = new global::Moula.CustomerService.ContactRequest();
            }
            input.ReadMessage(contact_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContactRequest : pb::IMessage<ContactRequest> {
    private static readonly pb::MessageParser<ContactRequest> _parser = new pb::MessageParser<ContactRequest>(() => new ContactRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContactRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactRequest(ContactRequest other) : this() {
      id_ = other.id_;
      contactTypeId_ = other.contactTypeId_;
      contact_ = other.contact_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactRequest Clone() {
      return new ContactRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ContactTypeId" field.</summary>
    public const int ContactTypeIdFieldNumber = 2;
    private int contactTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContactTypeId {
      get { return contactTypeId_; }
      set {
        contactTypeId_ = value;
      }
    }

    /// <summary>Field number for the "Contact" field.</summary>
    public const int ContactFieldNumber = 3;
    private string contact_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contact {
      get { return contact_; }
      set {
        contact_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContactRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContactRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ContactTypeId != other.ContactTypeId) return false;
      if (Contact != other.Contact) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ContactTypeId != 0) hash ^= ContactTypeId.GetHashCode();
      if (Contact.Length != 0) hash ^= Contact.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ContactTypeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ContactTypeId);
      }
      if (Contact.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Contact);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ContactTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactTypeId);
      }
      if (Contact.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contact);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContactRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ContactTypeId != 0) {
        ContactTypeId = other.ContactTypeId;
      }
      if (other.Contact.Length != 0) {
        Contact = other.Contact;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            ContactTypeId = input.ReadInt32();
            break;
          }
          case 26: {
            Contact = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomerAddressRequest : pb::IMessage<CustomerAddressRequest> {
    private static readonly pb::MessageParser<CustomerAddressRequest> _parser = new pb::MessageParser<CustomerAddressRequest>(() => new CustomerAddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomerAddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerAddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerAddressRequest(CustomerAddressRequest other) : this() {
      id_ = other.id_;
      isPrimary_ = other.isPrimary_;
      customerId_ = other.customerId_;
      addressId_ = other.addressId_;
      Address = other.address_ != null ? other.Address.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerAddressRequest Clone() {
      return new CustomerAddressRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "IsPrimary" field.</summary>
    public const int IsPrimaryFieldNumber = 2;
    private bool isPrimary_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsPrimary {
      get { return isPrimary_; }
      set {
        isPrimary_ = value;
      }
    }

    /// <summary>Field number for the "CustomerId" field.</summary>
    public const int CustomerIdFieldNumber = 3;
    private int customerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomerId {
      get { return customerId_; }
      set {
        customerId_ = value;
      }
    }

    /// <summary>Field number for the "AddressId" field.</summary>
    public const int AddressIdFieldNumber = 4;
    private int addressId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressId {
      get { return addressId_; }
      set {
        addressId_ = value;
      }
    }

    /// <summary>Field number for the "Address" field.</summary>
    public const int AddressFieldNumber = 5;
    private global::Moula.CustomerService.AddressRequest address_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Moula.CustomerService.AddressRequest Address {
      get { return address_; }
      set {
        address_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomerAddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomerAddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (IsPrimary != other.IsPrimary) return false;
      if (CustomerId != other.CustomerId) return false;
      if (AddressId != other.AddressId) return false;
      if (!object.Equals(Address, other.Address)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (IsPrimary != false) hash ^= IsPrimary.GetHashCode();
      if (CustomerId != 0) hash ^= CustomerId.GetHashCode();
      if (AddressId != 0) hash ^= AddressId.GetHashCode();
      if (address_ != null) hash ^= Address.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (IsPrimary != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsPrimary);
      }
      if (CustomerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(CustomerId);
      }
      if (AddressId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(AddressId);
      }
      if (address_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (IsPrimary != false) {
        size += 1 + 1;
      }
      if (CustomerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomerId);
      }
      if (AddressId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressId);
      }
      if (address_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Address);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomerAddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.IsPrimary != false) {
        IsPrimary = other.IsPrimary;
      }
      if (other.CustomerId != 0) {
        CustomerId = other.CustomerId;
      }
      if (other.AddressId != 0) {
        AddressId = other.AddressId;
      }
      if (other.address_ != null) {
        if (address_ == null) {
          address_ = new global::Moula.CustomerService.AddressRequest();
        }
        Address.MergeFrom(other.Address);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            IsPrimary = input.ReadBool();
            break;
          }
          case 24: {
            CustomerId = input.ReadInt32();
            break;
          }
          case 32: {
            AddressId = input.ReadInt32();
            break;
          }
          case 42: {
            if (address_ == null) {
              address_ = new global::Moula.CustomerService.AddressRequest();
            }
            input.ReadMessage(address_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressRequest : pb::IMessage<AddressRequest> {
    private static readonly pb::MessageParser<AddressRequest> _parser = new pb::MessageParser<AddressRequest>(() => new AddressRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressRequest(AddressRequest other) : this() {
      id_ = other.id_;
      addressTypeId_ = other.addressTypeId_;
      street_ = other.street_;
      street2_ = other.street2_;
      suburb_ = other.suburb_;
      stateId_ = other.stateId_;
      country_ = other.country_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressRequest Clone() {
      return new AddressRequest(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "AddressTypeId" field.</summary>
    public const int AddressTypeIdFieldNumber = 2;
    private int addressTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressTypeId {
      get { return addressTypeId_; }
      set {
        addressTypeId_ = value;
      }
    }

    /// <summary>Field number for the "Street" field.</summary>
    public const int StreetFieldNumber = 3;
    private string street_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Street {
      get { return street_; }
      set {
        street_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Street2" field.</summary>
    public const int Street2FieldNumber = 4;
    private string street2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Street2 {
      get { return street2_; }
      set {
        street2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Suburb" field.</summary>
    public const int SuburbFieldNumber = 5;
    private string suburb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suburb {
      get { return suburb_; }
      set {
        suburb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StateId" field.</summary>
    public const int StateIdFieldNumber = 6;
    private int stateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 7;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AddressTypeId != other.AddressTypeId) return false;
      if (Street != other.Street) return false;
      if (Street2 != other.Street2) return false;
      if (Suburb != other.Suburb) return false;
      if (StateId != other.StateId) return false;
      if (Country != other.Country) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AddressTypeId != 0) hash ^= AddressTypeId.GetHashCode();
      if (Street.Length != 0) hash ^= Street.GetHashCode();
      if (Street2.Length != 0) hash ^= Street2.GetHashCode();
      if (Suburb.Length != 0) hash ^= Suburb.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AddressTypeId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AddressTypeId);
      }
      if (Street.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Street);
      }
      if (Street2.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Street2);
      }
      if (Suburb.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Suburb);
      }
      if (StateId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(StateId);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Country);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AddressTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressTypeId);
      }
      if (Street.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
      }
      if (Street2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Street2);
      }
      if (Suburb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suburb);
      }
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressRequest other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AddressTypeId != 0) {
        AddressTypeId = other.AddressTypeId;
      }
      if (other.Street.Length != 0) {
        Street = other.Street;
      }
      if (other.Street2.Length != 0) {
        Street2 = other.Street2;
      }
      if (other.Suburb.Length != 0) {
        Suburb = other.Suburb;
      }
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            AddressTypeId = input.ReadInt32();
            break;
          }
          case 26: {
            Street = input.ReadString();
            break;
          }
          case 34: {
            Street2 = input.ReadString();
            break;
          }
          case 42: {
            Suburb = input.ReadString();
            break;
          }
          case 48: {
            StateId = input.ReadInt32();
            break;
          }
          case 58: {
            Country = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CreateCustomerResponse : pb::IMessage<CreateCustomerResponse> {
    private static readonly pb::MessageParser<CreateCustomerResponse> _parser = new pb::MessageParser<CreateCustomerResponse>(() => new CreateCustomerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateCustomerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCustomerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCustomerResponse(CreateCustomerResponse other) : this() {
      successful_ = other.successful_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateCustomerResponse Clone() {
      return new CreateCustomerResponse(this);
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 1;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateCustomerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateCustomerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Successful != other.Successful) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Successful != false) hash ^= Successful.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Successful != false) {
        output.WriteRawTag(8);
        output.WriteBool(Successful);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Successful != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateCustomerResponse other) {
      if (other == null) {
        return;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Successful = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class UpdateCustomerResponse : pb::IMessage<UpdateCustomerResponse> {
    private static readonly pb::MessageParser<UpdateCustomerResponse> _parser = new pb::MessageParser<UpdateCustomerResponse>(() => new UpdateCustomerResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<UpdateCustomerResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCustomerResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCustomerResponse(UpdateCustomerResponse other) : this() {
      successful_ = other.successful_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UpdateCustomerResponse Clone() {
      return new UpdateCustomerResponse(this);
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 1;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as UpdateCustomerResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(UpdateCustomerResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Successful != other.Successful) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Successful != false) hash ^= Successful.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Successful != false) {
        output.WriteRawTag(8);
        output.WriteBool(Successful);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Successful != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(UpdateCustomerResponse other) {
      if (other == null) {
        return;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Successful = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomerDetailRequest : pb::IMessage<CustomerDetailRequest> {
    private static readonly pb::MessageParser<CustomerDetailRequest> _parser = new pb::MessageParser<CustomerDetailRequest>(() => new CustomerDetailRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomerDetailRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerDetailRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerDetailRequest(CustomerDetailRequest other) : this() {
      topCustomers_ = other.topCustomers_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerDetailRequest Clone() {
      return new CustomerDetailRequest(this);
    }

    /// <summary>Field number for the "TopCustomers" field.</summary>
    public const int TopCustomersFieldNumber = 1;
    private int topCustomers_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TopCustomers {
      get { return topCustomers_; }
      set {
        topCustomers_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomerDetailRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomerDetailRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TopCustomers != other.TopCustomers) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TopCustomers != 0) hash ^= TopCustomers.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TopCustomers != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(TopCustomers);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TopCustomers != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TopCustomers);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomerDetailRequest other) {
      if (other == null) {
        return;
      }
      if (other.TopCustomers != 0) {
        TopCustomers = other.TopCustomers;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TopCustomers = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CustomerDetailResponse : pb::IMessage<CustomerDetailResponse> {
    private static readonly pb::MessageParser<CustomerDetailResponse> _parser = new pb::MessageParser<CustomerDetailResponse>(() => new CustomerDetailResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CustomerDetailResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerDetailResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerDetailResponse(CustomerDetailResponse other) : this() {
      id_ = other.id_;
      firstName_ = other.firstName_;
      lastName_ = other.lastName_;
      fullName_ = other.fullName_;
      contact_ = other.contact_;
      contactId_ = other.contactId_;
      contactTypeId_ = other.contactTypeId_;
      customerContactId_ = other.customerContactId_;
      addressId_ = other.addressId_;
      street_ = other.street_;
      street2_ = other.street2_;
      suburb_ = other.suburb_;
      stateName_ = other.stateName_;
      stateId_ = other.stateId_;
      country_ = other.country_;
      addressTypeId_ = other.addressTypeId_;
      customerAddressId_ = other.customerAddressId_;
      customerCode_ = other.customerCode_;
      dateOfBirth_ = other.dateOfBirth_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CustomerDetailResponse Clone() {
      return new CustomerDetailResponse(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "FirstName" field.</summary>
    public const int FirstNameFieldNumber = 2;
    private string firstName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FirstName {
      get { return firstName_; }
      set {
        firstName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "LastName" field.</summary>
    public const int LastNameFieldNumber = 3;
    private string lastName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string LastName {
      get { return lastName_; }
      set {
        lastName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FullName" field.</summary>
    public const int FullNameFieldNumber = 4;
    private string fullName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FullName {
      get { return fullName_; }
      set {
        fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Contact" field.</summary>
    public const int ContactFieldNumber = 5;
    private string contact_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Contact {
      get { return contact_; }
      set {
        contact_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContactId" field.</summary>
    public const int ContactIdFieldNumber = 6;
    private int contactId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContactId {
      get { return contactId_; }
      set {
        contactId_ = value;
      }
    }

    /// <summary>Field number for the "ContactTypeId" field.</summary>
    public const int ContactTypeIdFieldNumber = 7;
    private int contactTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ContactTypeId {
      get { return contactTypeId_; }
      set {
        contactTypeId_ = value;
      }
    }

    /// <summary>Field number for the "CustomerContactId" field.</summary>
    public const int CustomerContactIdFieldNumber = 8;
    private int customerContactId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomerContactId {
      get { return customerContactId_; }
      set {
        customerContactId_ = value;
      }
    }

    /// <summary>Field number for the "AddressId" field.</summary>
    public const int AddressIdFieldNumber = 9;
    private int addressId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressId {
      get { return addressId_; }
      set {
        addressId_ = value;
      }
    }

    /// <summary>Field number for the "Street" field.</summary>
    public const int StreetFieldNumber = 10;
    private string street_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Street {
      get { return street_; }
      set {
        street_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Street2" field.</summary>
    public const int Street2FieldNumber = 11;
    private string street2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Street2 {
      get { return street2_; }
      set {
        street2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Suburb" field.</summary>
    public const int SuburbFieldNumber = 12;
    private string suburb_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Suburb {
      get { return suburb_; }
      set {
        suburb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StateName" field.</summary>
    public const int StateNameFieldNumber = 13;
    private string stateName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateName {
      get { return stateName_; }
      set {
        stateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StateId" field.</summary>
    public const int StateIdFieldNumber = 14;
    private int stateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StateId {
      get { return stateId_; }
      set {
        stateId_ = value;
      }
    }

    /// <summary>Field number for the "Country" field.</summary>
    public const int CountryFieldNumber = 15;
    private string country_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Country {
      get { return country_; }
      set {
        country_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressTypeId" field.</summary>
    public const int AddressTypeIdFieldNumber = 16;
    private int addressTypeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AddressTypeId {
      get { return addressTypeId_; }
      set {
        addressTypeId_ = value;
      }
    }

    /// <summary>Field number for the "CustomerAddressId" field.</summary>
    public const int CustomerAddressIdFieldNumber = 17;
    private int customerAddressId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CustomerAddressId {
      get { return customerAddressId_; }
      set {
        customerAddressId_ = value;
      }
    }

    /// <summary>Field number for the "CustomerCode" field.</summary>
    public const int CustomerCodeFieldNumber = 18;
    private string customerCode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string CustomerCode {
      get { return customerCode_; }
      set {
        customerCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DateOfBirth" field.</summary>
    public const int DateOfBirthFieldNumber = 19;
    private string dateOfBirth_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DateOfBirth {
      get { return dateOfBirth_; }
      set {
        dateOfBirth_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CustomerDetailResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CustomerDetailResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (FirstName != other.FirstName) return false;
      if (LastName != other.LastName) return false;
      if (FullName != other.FullName) return false;
      if (Contact != other.Contact) return false;
      if (ContactId != other.ContactId) return false;
      if (ContactTypeId != other.ContactTypeId) return false;
      if (CustomerContactId != other.CustomerContactId) return false;
      if (AddressId != other.AddressId) return false;
      if (Street != other.Street) return false;
      if (Street2 != other.Street2) return false;
      if (Suburb != other.Suburb) return false;
      if (StateName != other.StateName) return false;
      if (StateId != other.StateId) return false;
      if (Country != other.Country) return false;
      if (AddressTypeId != other.AddressTypeId) return false;
      if (CustomerAddressId != other.CustomerAddressId) return false;
      if (CustomerCode != other.CustomerCode) return false;
      if (DateOfBirth != other.DateOfBirth) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (FirstName.Length != 0) hash ^= FirstName.GetHashCode();
      if (LastName.Length != 0) hash ^= LastName.GetHashCode();
      if (FullName.Length != 0) hash ^= FullName.GetHashCode();
      if (Contact.Length != 0) hash ^= Contact.GetHashCode();
      if (ContactId != 0) hash ^= ContactId.GetHashCode();
      if (ContactTypeId != 0) hash ^= ContactTypeId.GetHashCode();
      if (CustomerContactId != 0) hash ^= CustomerContactId.GetHashCode();
      if (AddressId != 0) hash ^= AddressId.GetHashCode();
      if (Street.Length != 0) hash ^= Street.GetHashCode();
      if (Street2.Length != 0) hash ^= Street2.GetHashCode();
      if (Suburb.Length != 0) hash ^= Suburb.GetHashCode();
      if (StateName.Length != 0) hash ^= StateName.GetHashCode();
      if (StateId != 0) hash ^= StateId.GetHashCode();
      if (Country.Length != 0) hash ^= Country.GetHashCode();
      if (AddressTypeId != 0) hash ^= AddressTypeId.GetHashCode();
      if (CustomerAddressId != 0) hash ^= CustomerAddressId.GetHashCode();
      if (CustomerCode.Length != 0) hash ^= CustomerCode.GetHashCode();
      if (DateOfBirth.Length != 0) hash ^= DateOfBirth.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (FirstName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(FirstName);
      }
      if (LastName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(LastName);
      }
      if (FullName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(FullName);
      }
      if (Contact.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(Contact);
      }
      if (ContactId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ContactId);
      }
      if (ContactTypeId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ContactTypeId);
      }
      if (CustomerContactId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CustomerContactId);
      }
      if (AddressId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AddressId);
      }
      if (Street.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(Street);
      }
      if (Street2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(Street2);
      }
      if (Suburb.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(Suburb);
      }
      if (StateName.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(StateName);
      }
      if (StateId != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(StateId);
      }
      if (Country.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(Country);
      }
      if (AddressTypeId != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AddressTypeId);
      }
      if (CustomerAddressId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CustomerAddressId);
      }
      if (CustomerCode.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(CustomerCode);
      }
      if (DateOfBirth.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(DateOfBirth);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (FirstName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirstName);
      }
      if (LastName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LastName);
      }
      if (FullName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
      }
      if (Contact.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Contact);
      }
      if (ContactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactId);
      }
      if (ContactTypeId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContactTypeId);
      }
      if (CustomerContactId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CustomerContactId);
      }
      if (AddressId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AddressId);
      }
      if (Street.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Street);
      }
      if (Street2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Street2);
      }
      if (Suburb.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Suburb);
      }
      if (StateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateName);
      }
      if (StateId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StateId);
      }
      if (Country.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Country);
      }
      if (AddressTypeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AddressTypeId);
      }
      if (CustomerAddressId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CustomerAddressId);
      }
      if (CustomerCode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CustomerCode);
      }
      if (DateOfBirth.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DateOfBirth);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CustomerDetailResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.FirstName.Length != 0) {
        FirstName = other.FirstName;
      }
      if (other.LastName.Length != 0) {
        LastName = other.LastName;
      }
      if (other.FullName.Length != 0) {
        FullName = other.FullName;
      }
      if (other.Contact.Length != 0) {
        Contact = other.Contact;
      }
      if (other.ContactId != 0) {
        ContactId = other.ContactId;
      }
      if (other.ContactTypeId != 0) {
        ContactTypeId = other.ContactTypeId;
      }
      if (other.CustomerContactId != 0) {
        CustomerContactId = other.CustomerContactId;
      }
      if (other.AddressId != 0) {
        AddressId = other.AddressId;
      }
      if (other.Street.Length != 0) {
        Street = other.Street;
      }
      if (other.Street2.Length != 0) {
        Street2 = other.Street2;
      }
      if (other.Suburb.Length != 0) {
        Suburb = other.Suburb;
      }
      if (other.StateName.Length != 0) {
        StateName = other.StateName;
      }
      if (other.StateId != 0) {
        StateId = other.StateId;
      }
      if (other.Country.Length != 0) {
        Country = other.Country;
      }
      if (other.AddressTypeId != 0) {
        AddressTypeId = other.AddressTypeId;
      }
      if (other.CustomerAddressId != 0) {
        CustomerAddressId = other.CustomerAddressId;
      }
      if (other.CustomerCode.Length != 0) {
        CustomerCode = other.CustomerCode;
      }
      if (other.DateOfBirth.Length != 0) {
        DateOfBirth = other.DateOfBirth;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            FirstName = input.ReadString();
            break;
          }
          case 26: {
            LastName = input.ReadString();
            break;
          }
          case 34: {
            FullName = input.ReadString();
            break;
          }
          case 42: {
            Contact = input.ReadString();
            break;
          }
          case 48: {
            ContactId = input.ReadInt32();
            break;
          }
          case 56: {
            ContactTypeId = input.ReadInt32();
            break;
          }
          case 64: {
            CustomerContactId = input.ReadInt32();
            break;
          }
          case 72: {
            AddressId = input.ReadInt32();
            break;
          }
          case 82: {
            Street = input.ReadString();
            break;
          }
          case 90: {
            Street2 = input.ReadString();
            break;
          }
          case 98: {
            Suburb = input.ReadString();
            break;
          }
          case 106: {
            StateName = input.ReadString();
            break;
          }
          case 112: {
            StateId = input.ReadInt32();
            break;
          }
          case 122: {
            Country = input.ReadString();
            break;
          }
          case 128: {
            AddressTypeId = input.ReadInt32();
            break;
          }
          case 136: {
            CustomerAddressId = input.ReadInt32();
            break;
          }
          case 146: {
            CustomerCode = input.ReadString();
            break;
          }
          case 154: {
            DateOfBirth = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContactTypeRequest : pb::IMessage<ContactTypeRequest> {
    private static readonly pb::MessageParser<ContactTypeRequest> _parser = new pb::MessageParser<ContactTypeRequest>(() => new ContactTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContactTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeRequest(ContactTypeRequest other) : this() {
      successful_ = other.successful_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeRequest Clone() {
      return new ContactTypeRequest(this);
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 1;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContactTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContactTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Successful != other.Successful) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Successful != false) hash ^= Successful.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Successful != false) {
        output.WriteRawTag(8);
        output.WriteBool(Successful);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Successful != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContactTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Successful = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ContactTypeResponse : pb::IMessage<ContactTypeResponse> {
    private static readonly pb::MessageParser<ContactTypeResponse> _parser = new pb::MessageParser<ContactTypeResponse>(() => new ContactTypeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContactTypeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeResponse(ContactTypeResponse other) : this() {
      id_ = other.id_;
      contactTypeAbbr_ = other.contactTypeAbbr_;
      contactTypeName_ = other.contactTypeName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContactTypeResponse Clone() {
      return new ContactTypeResponse(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "ContactTypeAbbr" field.</summary>
    public const int ContactTypeAbbrFieldNumber = 2;
    private string contactTypeAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactTypeAbbr {
      get { return contactTypeAbbr_; }
      set {
        contactTypeAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "ContactTypeName" field.</summary>
    public const int ContactTypeNameFieldNumber = 3;
    private string contactTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContactTypeName {
      get { return contactTypeName_; }
      set {
        contactTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContactTypeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContactTypeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (ContactTypeAbbr != other.ContactTypeAbbr) return false;
      if (ContactTypeName != other.ContactTypeName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (ContactTypeAbbr.Length != 0) hash ^= ContactTypeAbbr.GetHashCode();
      if (ContactTypeName.Length != 0) hash ^= ContactTypeName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (ContactTypeAbbr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ContactTypeAbbr);
      }
      if (ContactTypeName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContactTypeName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (ContactTypeAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactTypeAbbr);
      }
      if (ContactTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContactTypeName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContactTypeResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.ContactTypeAbbr.Length != 0) {
        ContactTypeAbbr = other.ContactTypeAbbr;
      }
      if (other.ContactTypeName.Length != 0) {
        ContactTypeName = other.ContactTypeName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            ContactTypeAbbr = input.ReadString();
            break;
          }
          case 26: {
            ContactTypeName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressTypeRequest : pb::IMessage<AddressTypeRequest> {
    private static readonly pb::MessageParser<AddressTypeRequest> _parser = new pb::MessageParser<AddressTypeRequest>(() => new AddressTypeRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressTypeRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressTypeRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressTypeRequest(AddressTypeRequest other) : this() {
      successful_ = other.successful_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressTypeRequest Clone() {
      return new AddressTypeRequest(this);
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 1;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressTypeRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressTypeRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Successful != other.Successful) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Successful != false) hash ^= Successful.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Successful != false) {
        output.WriteRawTag(8);
        output.WriteBool(Successful);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Successful != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressTypeRequest other) {
      if (other == null) {
        return;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Successful = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AddressTypeResponse : pb::IMessage<AddressTypeResponse> {
    private static readonly pb::MessageParser<AddressTypeResponse> _parser = new pb::MessageParser<AddressTypeResponse>(() => new AddressTypeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AddressTypeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressTypeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressTypeResponse(AddressTypeResponse other) : this() {
      id_ = other.id_;
      addressTypeName_ = other.addressTypeName_;
      addressTypeAbbr_ = other.addressTypeAbbr_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressTypeResponse Clone() {
      return new AddressTypeResponse(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "AddressTypeName" field.</summary>
    public const int AddressTypeNameFieldNumber = 2;
    private string addressTypeName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressTypeName {
      get { return addressTypeName_; }
      set {
        addressTypeName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "AddressTypeAbbr" field.</summary>
    public const int AddressTypeAbbrFieldNumber = 3;
    private string addressTypeAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AddressTypeAbbr {
      get { return addressTypeAbbr_; }
      set {
        addressTypeAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AddressTypeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AddressTypeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (AddressTypeName != other.AddressTypeName) return false;
      if (AddressTypeAbbr != other.AddressTypeAbbr) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (AddressTypeName.Length != 0) hash ^= AddressTypeName.GetHashCode();
      if (AddressTypeAbbr.Length != 0) hash ^= AddressTypeAbbr.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (AddressTypeName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(AddressTypeName);
      }
      if (AddressTypeAbbr.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(AddressTypeAbbr);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (AddressTypeName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressTypeName);
      }
      if (AddressTypeAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AddressTypeAbbr);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AddressTypeResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.AddressTypeName.Length != 0) {
        AddressTypeName = other.AddressTypeName;
      }
      if (other.AddressTypeAbbr.Length != 0) {
        AddressTypeAbbr = other.AddressTypeAbbr;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            AddressTypeName = input.ReadString();
            break;
          }
          case 26: {
            AddressTypeAbbr = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StateRequest : pb::IMessage<StateRequest> {
    private static readonly pb::MessageParser<StateRequest> _parser = new pb::MessageParser<StateRequest>(() => new StateRequest());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateRequest(StateRequest other) : this() {
      successful_ = other.successful_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateRequest Clone() {
      return new StateRequest(this);
    }

    /// <summary>Field number for the "successful" field.</summary>
    public const int SuccessfulFieldNumber = 1;
    private bool successful_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Successful {
      get { return successful_; }
      set {
        successful_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Successful != other.Successful) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Successful != false) hash ^= Successful.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Successful != false) {
        output.WriteRawTag(8);
        output.WriteBool(Successful);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Successful != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateRequest other) {
      if (other == null) {
        return;
      }
      if (other.Successful != false) {
        Successful = other.Successful;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Successful = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StateResponse : pb::IMessage<StateResponse> {
    private static readonly pb::MessageParser<StateResponse> _parser = new pb::MessageParser<StateResponse>(() => new StateResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StateResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Moula.CustomerService.CustomerServiceReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateResponse(StateResponse other) : this() {
      id_ = other.id_;
      stateAbbr_ = other.stateAbbr_;
      stateName_ = other.stateName_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StateResponse Clone() {
      return new StateResponse(this);
    }

    /// <summary>Field number for the "Id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "StateAbbr" field.</summary>
    public const int StateAbbrFieldNumber = 2;
    private string stateAbbr_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateAbbr {
      get { return stateAbbr_; }
      set {
        stateAbbr_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "StateName" field.</summary>
    public const int StateNameFieldNumber = 3;
    private string stateName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string StateName {
      get { return stateName_; }
      set {
        stateName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StateResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StateResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (StateAbbr != other.StateAbbr) return false;
      if (StateName != other.StateName) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (StateAbbr.Length != 0) hash ^= StateAbbr.GetHashCode();
      if (StateName.Length != 0) hash ^= StateName.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (StateAbbr.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(StateAbbr);
      }
      if (StateName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(StateName);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (StateAbbr.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateAbbr);
      }
      if (StateName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(StateName);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StateResponse other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.StateAbbr.Length != 0) {
        StateAbbr = other.StateAbbr;
      }
      if (other.StateName.Length != 0) {
        StateName = other.StateName;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            StateAbbr = input.ReadString();
            break;
          }
          case 26: {
            StateName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
